<html>
  <head>
  <meta charset="utf-8">
    <script type="text/javascript" src="lib/ola.min.js"></script>
    <script type="text/javascript" src="lib/smoothie.js"></script>
    <script src="lib/p5.min.js"></script>
	<style>
	.pa {color: red;}
	. viewport {position: absolute;}
	</style>
	<style>
<!-- plot -->
body {
  margin: 0;
  padding: 0;
  font-family: Sans-Serif;
}

.btn:hover {
    color: #fff!important;
    background-color: #555!important;
}
.btn {
    color: #000!important;
    background-color: #fff!important;
	text-align: center;
}

.legend {
  margin: 10px;
}

.dot {
  margin-right: 10px;
}

.dot::before {
  content: '';
  width: 15px;
  height: 15px;
  margin-bottom: -2px;
  margin-right: 5px;
  border-radius: 10px;
  display: inline-block;
  background: red;
}

.dot.control::before {
  background: rgba(0, 0, 255, 0.4);
}

.dot.interpolated::before {
  background: rgba(255, 0, 0, 0.6);
}

.container {
  position: relative;
  margin: 10px;
  box-shadow: 0 0 0 1px #ccc;
  border-radius: 8px;
  height: 200px;
  overflow: hidden;
}

canvas#graph {
  transform: scale(0.5);
  transform-origin: top left;
}
<!--                -->
#dataArr_divs div
{
  width:40px;
  color: grey;
  /*
  margin: 0 .5em;
  padding: .5em;*/
  /* important */
  min-height: 90%;
}

#dataArr_divs {
  /*width: 90%;*/
  height: 60px;
  background: black; /*linear-gradient(red,blue);*/
  padding: 30px;
  /* important */
  display: flex;
  /* important */
  align-items: stretch;
  justify-content: space-around;
}
<!--                -->
.collapsible {
  background-color: #3b3c3cd0; /*dust #5b4c4cf0;  r 310101f0; 	#777; */
  color: white;
  cursor: pointer;
  padding: 18px;
  width: 100%;
  border: none;
  text-align: left;
  outline: none;
  font-size: 15px;
}
.active, .collapsible:hover {
  background-color: #abacacf0;/*400d 	r #500c; 	#aa5f;*/
  color: black;
}
.collapsible:after {
  content: '\002B';
  color: white;
  font-weight: bold;
  float: right;
  margin-left: 5px;
}
.active:after {
  content: "\2212";
}
.content {
  padding: 0 18px;
  display: none;
  overflow: hidden;
  background-color: #f1f1f1; /*#f1f1f1fa;*/
  align-items: stretch;
}
<!--                -->
</style>
<script>
var stt={
 ww:1024,
 hh:512,
 zoomW:1,
 zoomH:1,
 format: 'TSV', //TSV bin0_254
 //serSpeed:115200
 serSpeed:1000000
};
var stt_default= Object.assign({}, stt); //shallow copy

function paramsToObject_and_Global(URLSear, settings_obj) {//https://stackoverflow.com/questions/8648892/how-to-convert-url-parameters-to-a-javascript-object
	console.log(URLSear);
  //let result = {}
  for(let entry of URLSear) { // each 'entry' is a [key, value] tupple
    const [key, value] = entry;
    //result[key] = value;
	
	let num=parseFloat(value);

	//settings_obj[key] = isNaN(num)?stt_default[key]:num; //allow only numbers
	settings_obj[key] = isNaN(num)?value:num; //TODO have to check if values format correct
	//window[key] = isNaN(num)?value:num; //and upd global var. TODO test if there is speed difference for access
  }
  //return result;
}
function settingsFromURL()
{
 paramsToObject_and_Global(new URLSearchParams(window.location.search), stt);
}
function URL_upd()
{
 let url_str=new URLSearchParams(stt).toString();//https://stackoverflow.com/questions/6566456/how-to-serialize-an-object-into-a-list-of-url-query-parameters
 let ar=window.location.pathname.split('/');
 history.replaceState(null, null, ar[ar.length-1]+'?'+url_str); //replaceState
}

settingsFromURL()

 xc=stt.ww/2;
 yc=stt.hh/2;
 xM=stt.ww-1;
 yM=stt.hh-1;
</script>
	
	<script src="common.js"></script>
	<script>
function componentToHex(c) {
  var hex = c.toString(16);
  return hex.length == 1 ? "0" + hex : hex;
}

function rgbToHex(r, g, b) { //rgbToHex(0, 51, 255) > #0033ff
  return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
}


function setup() {
  createCanvas(stt.ww, stt.hh);
}

var dataArr_divs_arr=[];

var dt_avg=10;
var dt_packet_avg=20;
var packet_t_last=0;
var bStop=false;
var il=0;
function draw() {

if(bStop) return;
	var t0=window.performance.now();

	if(dataArr.length<=20)
	{
		if(dataArr_divs_arr.length<dataArr.length) //create elements for each data value
		{
			for(let i=0;i<dataArr.length-dataArr_divs_arr.length;i++)
			{
				var el = document.createElement("div");                 // Create a <li> node
				//var textnode = document.createTextNode(dataArr[]);         // Create a text node
				//el.appendChild(textnode);                              // Append the text to <li>
				$("dataArr_divs").appendChild(el);     // Append <li> to <ul> with id="myList"

				dataArr_divs_arr.push(el);
			}
		}
		//console.log(dataArr_divs_arr.length, dataArr.length);
		for(let i=0;i<dataArr_divs_arr.length;i++)
		{
			dataArr_divs_arr[i].style.backgroundColor='rgb(' + dataArr[i] + ',' + dataArr[i] + ',0)'; //rgbToHex(dataArr[i],dataArr[i],0);
		}
	}
	
	loadPixels();
	//let d = pixelDensity(); //https://p5js.org/reference/#/p5/pixels
	for(let y=0, n=0;y<stt.hh;y++){
	for(let x=0;x<stt.ww;x++,n+=4) {
	
	  if(y==stt.hh-1) //draw 1 line
	  {
		 if(x<dataArr.length*stt.zoomW) //TODO use zoomH
		 {
			let value = dataArr[Math.floor(x/stt.zoomW)];
			//if(value==0&&pixels[n]==0) continue; //skip unused
			//if(value!=0&& pixels[n]!=0) continue;
			//buffer32[n] =  value<<8   //(255   << 24) |value<<8
			//for(let wi=0;wi<stt.zoomW;wi++)
			{
				pixels[n] = value;
				pixels[(n + 1)] = value>=254?value/2:value; //red for 255
				pixels[n + 2] = value>=254?0:1//110;
				pixels[(n + 3)] = 255;
			}

		 }
		}else //shift pixels of other lines
		{
			let value = dataArr[x];
			pixels[n] = pixels[n+stt.ww*4];
			pixels[n + 1] = pixels[n+1+stt.ww*4];
			pixels[n + 2] = pixels[n+2+stt.ww*4];//110;
			pixels[n + 3] = 255;
		}

	}
	}
	updatePixels();
	
	dt_avg=dt_avg*0.96+(window.performance.now()-t0)*0.04; $('t').innerText=dt_avg.toFixed(2);
	il++;
}


function hide_sw(id){
  x=$('id')
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
// $('canvas').classList.toggle('hidden')
}

var showArr='f';
function show_field(){ showArr='f';
}
function show_hist(){ showArr='h';
}
function show_visits(){ showArr='v';
}
var speed=100;
function sliderSpeed_change(v){
	speed=Math.pow(v,3);
    $tx("sliderSpeed_txt",speed);
}
	</script>
  </head>
  <body>
  	<a class='btn' href="?format=bin0_254&hh=1024&ww=1024&zoomW=1&zoomH=1">BIN 1024 x1 for linear camera array Toshiba TCD1201D</a><br>
	<a class='btn' href="?format=TSV&ww=1024&zoomW=40&zoomH=1">TSV 1024 x40</a>
	<a class='btn' href="?format=TSV&ww=800&zoomW=20&zoomH=1">TSV 800 x20</a>
	<a class='btn' href="?format=TSV&ww=16&zoomW=1&zoomH=40">TSV 16 x1</a>
	<br>
	<a class='btn' onclick='stt.serSpeed=1000000; URL_upd()'>serSpeed=1000000</a>
	<a class='btn' onclick='stt.serSpeed=115200; URL_upd()'>serSpeed=115200</a>
	
    <main></main>
	<div id="dataArr_divs"></div>
	

draw: <i id='t'></i>ms; packet_dt: <i id='packet_dt'></i>ms; packet loss: <i id='iloss'></i><br>
<!-- <button id='stop_sw'  onclick="bStop=!bStop; $tx('stop_sw',bStop?'start':'stop'); if(!bStop)loop();">stop</button>  -->
<!-- <button id='btn_show_field'  onclick="show_field()">show_field</button>  -->
<!-- <button id='btn_show_hist'  onclick="show_hist()">show_hist</button>  -->
<!-- <button id='btn_show_visits'  onclick="show_visits()">show_visits</button> <br> -->

<button id="connectButton" onclick="clickConnect()">Connect</button><span id="statusBar">Disconnected</span><br>
<input id="sendText"  onclick="clickSend()" type="text" /><input id="sendButton" type="button" value="send" /><br>
<textarea readonly id="receiveText"  style="display:none"></textarea>

<!-- <label for="baudrate">Baud rate:</label> <select id="baudrate"> <option value="9600">9600</option> <option value="14400">14400</option> <option value="19200">19220</option> <option value="28800">28800</option> <option value="38400">38400</option> <option value="57600">57600</option> <option value="115200" selected="selected">115200</option> <option value="230400">230400</option> <option value="460800">460800</option> <option value="921600">921600</option> <option value="custom">Custom</option> </select> <br> -->
<!-- <input id='sliderSpeed' type="range" min="1" max="100" value="10" oninput="sliderSpeed_change(this.value)"> <i id='sliderSpeed_txt'>speed</i><br> -->

<script>
document.body.onkeyup = function(e){
if(e.keyCode == 32){$('stop_sw').click()}
else{
 //$('btn_show_field').click()
}
}
document.body.onkeydown  = function(e){
if(e.key == 'h'){$('btn_show_hist').click()} //ctrl //codes https://stackoverflow.com/questions/3781142/jquery-or-javascript-how-determine-if-shift-key-being-pressed-while-clicking-an
else
if(e.key == 'v'){$('btn_show_visits').click()} //shift
else
showArr='f';
}
</script>
<script>
let sendText = document.getElementById("sendText");
let sendButton = document.getElementById("sendButton");
let receiveText = document.getElementById("receiveText");
let connectButton = document.getElementById("connectButton");
let statusBar = document.getElementById("statusBar");

//When the connectButton is pressed
async function clickConnect() {
    if (port) {   //if already connected, disconnect
        disconnect();
    } else {      //otherwise connect
        await connect();
    }
}


//Define outputstream, inputstream and port so they can be used throughout the sketch
var outputStream, inputStream, port;
navigator.serial.addEventListener('connect', e => {
    statusBar.innerText = `Connected to ${e.port}`;
    connectButton.innerText = "Disconnect"
  });
  
  navigator.serial.addEventListener('disconnect', e => {
    statusBar.innerText = `Disconnected`;
    connectButton.innerText = "Connect"
  });

async function connect() { //TODO upd from 3d line builder
	/* //Optional filter to only see relevant boards
    const filter = {
        usbVendorId: 0x2341 // Arduino SA
    };
	*/

    //Try to connect to the Serial port
    try {
        port = await navigator.serial.requestPort({ filters: [] });
        // Continue connecting to |port|.

        // - Wait for the port to open.
        await port.open({ baudRate: stt.serSpeed });

        statusBar.innerText = "Connected";
        connectButton.innerText = "Disconnect"
		switch(stt.format)
		{
			case 'TSV':
				{
				let decoder = new TextDecoderStream();
				inputDone = port.readable.pipeTo(decoder.writable);
				inputStream = decoder.readable;
				reader = inputStream.getReader(); 
				}
			break;
			case 'bin0_254':
				reader = port.readable.getReader();
			break;
		}

        const encoder = new TextEncoderStream();
        outputDone = encoder.readable.pipeTo(port.writable);
        outputStream = encoder.writable;

        readLoop();
    } catch (e) {

        //If the pipeTo error appears; clarify the problem by giving suggestions.
        if (e == "TypeError: Cannot read property 'pipeTo' of undefined") {
            e += "\n Enable in Chromium: <a href='chrome://flags/#enable-experimental-web-platform-features'>chrome://flags/#enable-experimental-web-platform-features</a> "
        }
        connectButton.innerText = "Connect"
        statusBar.innerText = e;
    }
}
//Write to the Serial port
async function writeToStream(line) {
    const writer = outputStream.getWriter();
    writer.write(line);
    writer.releaseLock();
}

//Disconnect from the Serial port
async function disconnect() {

    if (reader) {
        await reader.cancel();
		if(inputDone!=null)
        await inputDone.catch(() => { });
        reader = null;
        inputDone = null;
    }
    if (outputStream) {
        await outputStream.getWriter().close();
        await outputDone;
        outputStream = null;
        outputDone = null;
    }
    statusBar.innerText = "Disconnected";
    connectButton.innerText = "Connect"
    //Close the port.
    await port.close();
    port = null;
}

//When the send button is pressed
function clickSend() {
    //send the message
    writeToStream(sendText.value)
    //and clear the input field, so it's clear it has been sent
    sendText.value = "";
}


var dataArr=[]
var dataArr_i=0;
var dataArr_buffer=[]
//Read the incoming data
var receiveText_buf='';
var packet_il_last=-1;
var packet_iloss_E=0;
var upd_display_next_t=0;
async function readLoop() {
var il=0;
    while (true) {
        const { value, done } = await reader.read();
        if (done === true){
            break;
        }
		
		switch(stt.format)
		{
			case 'TSV':
				var st=receiveText_buf+value;
				while(true)
				{
				  
				  if(st.indexOf('\r')<2) 
				  {
					receiveText_buf = st;
					break;
				  }
				  
				  dataArr=st.substr(0, st.indexOf('\r')).split('\t')
				  
				  //if(dataArr.length>1)
				  //control.append(new Date(), parseInt(dataArr[1]));
				  
				  st=st.substr(st.indexOf('\r')).trimStart();
				  
					output.append(new Date(), dataPlot.value);
				    dataPlot.value = dataArr[4]; //dataArr.length>7? dataArr[8]:
					control.append(new Date(), dataArr[4]);
					
					let packet_il=parseInt(dataArr[0]);
					let packet_t=parseInt(dataArr[1]);
					if(packet_il_last!=packet_il-1)
					{
						packet_iloss_E++;
					}
					dt_packet_avg=dt_packet_avg*0.9+(packet_t-packet_t_last)*0.1;
					if(isNaN(dt_packet_avg)) dt_packet_avg=0;
					
					
					packet_t_last=packet_t;
					if(packet_iloss_E>1000) packet_iloss_E=0;
					packet_il_last=packet_il;
					
					if(millis()>upd_display_next_t)
					{
						upd_display_next_t=millis()+50;
					  $('log').innerText=dataArr;
					  $('iloss').innerText=packet_iloss_E;
					  $('packet_dt').innerText=dt_packet_avg.toFixed(2);
					}
				}
				receiveText_buf=st;
			break;
			case 'bin0_254':
			//il++;
			//if(il%10!=0) break;
			
			
				dataArr_buffer=value;
				//document.getElementById("log").innerHTML +='<br>'
                //document.getElementById("log").innerHTML += value;
 
				
				//dataArr_buffer=dataArr_buffer.concat(value);
				for(var i=0;i<dataArr_buffer.length;i++)
				{
					if(dataArr_buffer[i]==255 || dataArr_buffer[i]==47 || dataArr_i>1100) //###TODO 47??
					{
					if(dataArr_i<1100)
					 //receiveText.value=dataArr;
					 //receiveText.value=dataArr_buffer[i];
					 
					dataArr_i=0;
					dataArr_buffer=dataArr_buffer.slice(i);
                    i=0;
//document.getElementById("demo").innerHTML += dataArr_buffer;
 // document.getElementById("demo").innerHTML +='<br>'
 // document.getElementById("demo").innerHTML += dataArr;
 

					continue;
					}
					dataArr[dataArr_i]=dataArr_buffer[i];
					dataArr_i++;
					

				}
				
				
				//if(value.length<2)
				
				
				//receiveText.value=dataArr_buffer
 
			break;
		}
		
        //When recieved something add it to the big textarea
        //receiveText.value += value;
        //Scroll to the bottom of the text field
        //receiveText.scrollTop = receiveText.scrollHeight;
    
}
}
</script>

<p id='log'></p>
<button type="button" class="collapsible">arduino sketch TSV format: <b>value \t value \t ....... \r</b></button>
<div class="content">
<pre>
#define ttab Serial.print("\t");
void setup(){Serial.begin(115200);}
uint16_t il=0;
void loop(){
	Serial.print(il); ttab
	Serial.print(millis()/1000); ttab
	for(byte p=A0;p<=A7;p++) {Serial.print(analogRead(p)); ttab}
	Serial.println();
	il++; delay(10);
}
</pre>
</div>
<button type="button" class="collapsible">arduino sketch BIN format: <b>value value value ....... 255</b> so each value is byte 0...254</button>
<div class="content">
<pre>
void setup(){Serial.begin(115200);}
uint16_t il=0;
void loop(){
	Serial.write((byte)il);
	for(byte p=A0,v;p<=A7;p++){
		v=analogRead(p)/4;
		if(v==255) v--;
		Serial.write(v);
	}
	Serial.write(255);
	il++; delay(5);
}
</pre>
</div>

  <div class="legend">
  <span class="dot control">Real value</span>
  <span class="dot interpolated">Interpolated</span>
</div>

<div class="container">
  <canvas id="graph" height="400"></canvas>
</div>
<script>
for (let i = 0, coll = document.getElementsByClassName("collapsible"); i < coll.length; i++) {
  coll[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var content = this.nextElementSibling;
    content.style.display = (content.style.display === "block") ? "none":"block";
  });
}
</script>
<script>

// Initial value for the position; center of the container
const dataPlot = Ola(0, 930);

// Double size and scale for better resolution
const canvasPlot = document.querySelector("#graph");
canvasPlot.width = window.innerWidth * 2;

const graph = new SmoothieChart({
  grid: { strokeStyle: '#fff', fillStyle: '#fff' },
  maxValue: 1023,
  minValue: 0,
  // This makes it render a bit worse, but otherwise it's cheating
  interpolation: 'step'
});
graph.streamTo(canvasPlot, 1200);

const control = new TimeSeries();
const output = new TimeSeries();

// Add to SmoothieChart
graph.addTimeSeries(control, { strokeStyle: 'rgba(0, 0, 255, 0.3)' });
graph.addTimeSeries(output, { strokeStyle: 'rgba(255, 0, 0, 0.6)', lineWidth: 2 });
control.append(new Date(), 0);

/*
(function tick() {
  output.append(new Date(), dataPlot.value);
  requestAnimationFrame(tick);
})();
*/
/*
// Add a random value to each line every 1-2 seconds
(function update() {
  const to = Math.random()*1023;
  dataPlot.value = to;
  control.append(new Date(), to);
  setTimeout(update, 1200);
})();
*/

</script>


  </body>
</html>