<!DOCTYPE html>
<html>
<script src="common.js"></script>

<script type="text/javascript"  src="dygraph.min.js"></script>
<link rel="stylesheet" src="dygraph.css" />

<style>
.lcd {
    background: black;
    color: aqua;
    font-size: 32px;
    font-family: 'Courier New', monospace;
	width: 512px;
	height: 128px;
    padding: 11px;
}

pre {
    height: 22em;
    line-height: 1em;
    overflow: scroll;
}

.gray{
 color: gray;
}

input.cmn-toggle-round + label {
  padding: 2px;
  width: 100px;
  height: 30px;
  background-color: #dddddd;
  -webkit-border-radius: 30px;
  -moz-border-radius: 30px;
  -ms-border-radius: 30px;
  -o-border-radius: 30px;
  border-radius: 30px;
}
input.cmn-toggle-round + label:before, input.cmn-toggle-round + label:after {
  display: block;
  position: absolute;
  top: 1px;
  left: 1px;
  bottom: 1px;
  content: "";
}
input.cmn-toggle-round + label:before {
  right: 1px;
  background-color: #f1f1f1;
  -webkit-border-radius: 30px;
  -moz-border-radius: 30px;
  -ms-border-radius: 30px;
  -o-border-radius: 30px;
  border-radius: 30px;
  -webkit-transition: background 0.4s;
  -moz-transition: background 0.4s;
  -o-transition: background 0.4s;
  transition: background 0.4s;
}
input.cmn-toggle-round + label:after {
  width: 40px;
  background-color: #fff;
  -webkit-border-radius: 100%;
  -moz-border-radius: 100%;
  -ms-border-radius: 100%;
  -o-border-radius: 100%;
  border-radius: 100%;
  -webkit-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  -moz-box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  -webkit-transition: margin 0.4s;
  -moz-transition: margin 0.4s;
  -o-transition: margin 0.4s;
  transition: margin 0.4s;
}
input.cmn-toggle-round:checked + label:before {
  background-color: #8ce196;
}
input.cmn-toggle-round:checked + label:after {
  margin-left: 60px;
}

.cmn-toggle {
  position: absolute;
  margin-left: -9999px;
  visibility: hidden;
}
.cmn-toggle + label {
  display: block;
  position: relative;
  cursor: pointer;
  outline: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}




.row {
  display: -webkit-flex;
  display: flex;
}




.slidecontainer {
  width: 100%;
}

.slider {
  -webkit-appearance: none;
  width: 100%;
  height: 25px;
  border-radius: 5px;
  background: #d3d3d3;
  outline: none;
  opacity: 0.7;
  -webkit-transition: .2s;
  transition: opacity .2s;
}
.slider_input {
  -webkit-appearance: none;
  width: 50%;
  height: 15px;
  border-radius: 2px;
  background: #d3d3d3;
  outline: none;
  opacity: 0.7;
  -webkit-transition: .2s;
  transition: opacity .2s;
}

.slider_input:hover {
  opacity: 1;
}

.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background: #4CAF50;
  cursor: pointer;
}

.slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  border-radius: 50%;
  background: #4CAF50;
  cursor: pointer;
}
</style>

<body>
<h2>UI functions in different modes:</h2>


<div style="display:none">
<div class="row">
<div id="graphdiv"  style="width:800px; height:400px;"></div>
<textarea  onpaste="onPasteTSV(this)" cols="10" rows="5">paste data from terminal</textarea>
</div>
    

power:
<div class="switch">
<input id="cmn-toggle-1" class="cmn-toggle cmn-toggle-round"  type="checkbox" onchange="pow_checkbox_ch(event)" >
<label for="cmn-toggle-1">123</label>
</div>
<br>	  
<br>
</div>

<h2 id='pot_str'>Input pos (pot linear):</h2>
<div class="slidecontainer">
  <input type="range" min="0" max="1024" value="100" class="slider_input" id="pot"  disabled>
  <!-- <p>Value: <span id="pot_v"></span></p> -->
</div>
<h3 id='pot_spd_str'>Input speed (pot rotary):</h3>
<div class="slidecontainer">
  <input type="range" min="0" max="1024" value="256" class="slider_input" id="pot_spd" disabled >
  <!-- <p>Value: <span id="pot_spd_v"></span></p> -->
</div>

<div style="display:none">
<h3>Input amplitude mul (US-015):</h3>
<div class="slidecontainer">
  <input type="range" min="0" max="1024" value="512" class="slider_input" id="US_input" disabled >
  <p>Value: <span id="US_input_v"></span></p>
</div>

<h1>Motor pointer:</h1>
<div class="slidecontainer">
  <input type="range" min="0" max="2000" value="500" class="slider" id="US_motor_sensor">
  <p>Value: <span id="US_motor_sensor_v"></span></p>
</div>

<h1>Motor predict:</h1>
<div class="slidecontainer">
  <input type="range" min="0" max="2000" value="500" class="slider" id="US_motor_smooth">
  <p>Value: <span id="US_motor_smooth_v"></span></p>
</div>

</div>

<h3>4 butons:</h2>
<button id='btn_rec' onclick="mode.rec_sw()"></button><br>
<button id='btn_play' onclick="mode.play_sw()"></button><br>
<button id='btn_next' onclick="mode.next_slot()"></button><br>
<button id='btn_pause' onclick="mode.pause()"></button><br>
<br>
<!-- <input type="checkbox" onChange="bPlay=this.checked;play_v=parseInt($('pot').value)">debug bPlay -->
<br>

<div id='lcd' class='lcd'>
<!-- 128*64 /8..6 = 16..21 symbols-->
...
</div>

<div style="display:none">
<h3 id="mode_inf"></h3>
<pre id="log"></pre>

<p id="demo"></p>
</div>

<script>
bPlayCyclic=false;
slot_now=0; //0 is manual mode

bRec=false;
bPlay=false;
limit_raw_L=300;
limit_raw_R=1500;

limit_L=0;
limit_R=0;
limit_range=0;

bLimitFound_L=false;
bLimitFound_R=false;

UI=
{
 manual:
 {
   inf:"default, manual control mode",
   setup: function(){
    $('btn_rec').innerHTML='rec sw';
    $('btn_play').innerHTML='play sw';
    $('btn_next').innerHTML='next slot in "R" stack (select slot 8 for Ultrasonic test, slot 9 for set max speed, acceleration, cycling Play';
    $('btn_pause').innerHTML="";//(b2ndStackMode?'P':'R')+' stack to change'; //TODO or single/cyclic play
    $('pot_str').innerText='position (or value)';
    $('pot_spd_str').innerText='position (or value), precission control';
   },

   rec_sw:()=>
   {
     rec_sw();
	 setMode(UI.rec);
   },
   play_sw:()=>
   {
     play_sw();
	 setMode(UI.play);
   },
   next_slot:()=>
   {
	 next_slot();
   },
   pause:()=>
   {
	 toggleb2ndStackMode();
	 mode.setup();
   }
 },//--------------------------------------------------------
 rec:
 {
   inf:"recording mode",
   setup: function(){
    $('btn_rec').innerHTML='stop rec sw';
    $('btn_play').innerHTML='<i class="gray">play additional slot if selected</i>';
    $('btn_next').innerHTML='<i class="gray">start/stop smooth (and rec this)</i>';
    $('btn_pause').innerHTML='pause';
    $('pot_str').innerText='position (or value)';
    $('pot_spd_str').innerText='position (or value), precission control';
   },

   rec_sw:()=>
   {
	 rec_sw();
	 setMode(UI.manual);
   },
   play_sw:()=>
   {
	
   },
   next_slot:()=>
   {

   },
   pause:()=>
   {
	 pause();
   }
 },//--------------------------------------------------------
 play:
 {
   inf:"play mode",
   setup: function(){
    $('btn_rec').innerHTML='<i class="gray">record to R stack</i>';
    $('btn_play').innerHTML='stop play';
    $('btn_next').innerHTML='<i class="gray">start/stop smooth</i>';
    $('btn_pause').innerHTML='pause';
    $('pot_str').innerText='add position (or value) to playback (if>0 && <max)';
    $('pot_spd_str').innerText='playback speed';
   },

   rec_sw:()=>
   {

   },
   play_sw:()=>
   {
		play_sw();
		setMode(UI.manual);
   },
   next_slot:()=>
   {

   },
   pause:()=>
   {
	 pause();
   }
 },
 settings:
 {
   inf:"settings mode",
   setup: function(){
    $('btn_rec').innerHTML=' ';
    $('btn_play').innerHTML=' ';
    $('btn_next').innerHTML='next save slot (select slot 8 for Ultrasonic test, slot 9 for set max speed, acceleration, cycling Play';
    $('btn_pause').innerHTML="play cyclic mode sw";//(b2ndStackMode?'P':'R')+' stack to change'; //TODO or single/cyclic play
    $('pot_str').innerText='max acceleration';
    $('pot_spd_str').innerText='max speed';
   },

   rec_sw:()=>
   {
     rec_sw();
	 //setMode(UI.rec);
   },
   play_sw:()=>
   {
     play_sw();
	 //setMode(UI.play);
   },
   next_slot:()=>
   {
	 next_slot();

   },
   pause:()=>
   {
	 bPlayCyclic=!bPlayCyclic;
	 LCD_show();
   }
 }
}

var mode;
var b2ndStackMode=false;

function setMode(m)
{	console.log(m, m.inf);
 mode=m;
 $('mode_inf').innerText=m.inf;
 m.setup();
 try {
 LCD_show();
 }
 catch(e) {}
}

setMode(UI.manual);

function pause(){}

function toggleb2ndStackMode()
{
 b2ndStackMode=!b2ndStackMode;
 //## draw mode mark
 LCD_show();
}


bPow=false;
function bPow_sw(b)
{
 if(!b)
 {
 bLimitFound_L=false;
 bLimitFound_R=false;
 }
 
 e=$('cmn-toggle-1');
 
 if(b!=e.checked) 
 {
  e.checked=b;
 }
 if(bPow!=b)
 {
  if(b)
  starting();
  
  bPow=b;
 }

}
function pow_checkbox_ch(e)
{
 bPow_sw(e.target.checked); //console.log(e.target.checked)
}




function starting()
{
 bInputEnable=false;
  $('pot').disabled=true;
  $('US_input').disabled=true;
  $('pot_spd').disabled=true;
  
 v=parseInt($('US_motor_sensor').value);
 if(!bLimitFound_L)
 {
  if(v>=limit_raw_L)
  {
  $('US_motor_sensor').value-=10;  //console.log(typeof(v),v)
  }
  else 
  {
   limit_L=v;
   bLimitFound_L=true;
  }
 }
 else
 if(!bLimitFound_R)
 {
  if(v<=limit_raw_R) 
  {
  $('US_motor_sensor').value=v+15; //console.log(typeof(v), limit_raw_R,v)
  }
  else 
  {
   limit_R=v;
   bLimitFound_R=true;
  }
 }
 else 
 {
  limit_range=limit_R-limit_L;
  //$tx('lcd', 'lim: '+limit_L+" "+limit_R) ;
  bInputEnable=true;
  $('pot').disabled=false;
  $('US_input').disabled=false;
  $('pot_spd').disabled=false;
 return;
 
 }

 
 
 setTimeout(starting, 5);
 
 
}


arr_slots=[[[],[]], [[],[]], [[],[]], [[],[]], [[],[]], [[],[]], [[],[]], [[],[]], [[],[]], [[],[]], ]
//'pot', 'spd', 'acc', 'pos'
var data_raw = arr_slots[0][0];
var data = arr_slots[0][1]; //for plot
slot0_nm='0 manual mode';

data_pos_t=0;
t_i=0; //data arr index
data_E=0;

	  
function onPasteTSV(e) {
 data_raw.length=0;
 data.length=0;
 
 var ar=e.value.split('\n');	
 
 for(var i=0;i<ar.length;i++)
 {
  data_raw[i]=ar[i].split('\t');
  if(data_raw[i].length>1)
  data.push([ 
  new Date( parseInt(data_raw[i][0]) )
  , parseInt(data_raw[i][1] ) 
  ]);
 }
 
  g.updateOptions( { 'file': data } );
		
 
  //console.log(data_raw);	 //el.value.split('\n')[0].split('\t')
}


//-----------------------------btn

function LCD_show()
{ console.log(slot_now, bPlayCyclic)

tx='slot '+slot_now+' ';
if(bRec) tx+='rec'
if(bPlay) tx+='play'
if(slot_now==8) tx+='US testing';
else
if(slot_now==9)
{tx+=' settings'
}
if(bPlayCyclic) tx+="  ♶ Cycle-play"

if(slot_now<8)
{
tx+='\n'
tx+= motor_pos();
}
$tx('lcd', tx) ;
}


function rec_sw() {
 bPow_sw(true);
 
  bRec=!bRec;
 /*
 if(bPlay)
 {} //continue rec from pos
 else
 {
  if(bRec)
  data_pos_t=0;
 }
 */
 if(bRec)
 {
  t0=Math.floor(performance.now());
  data_pos_t=0;
  data_raw.length=0;
  data.length=0;
 }
  

 bPlay=false;
 if(timer_ID_play!=null)  clearInterval( timer_ID_play );

 
 LCD_show();
}

timer_ID_play=null
function play_sw(b) {
 //bPow_sw(true);
 if(typeof(b) =='boolean') bPlay=b;
 else
 bPlay=!bPlay;
 /*
 if(bRec){}// play from pos
 else
 data_pos_t=0;
 */
 data_pos_t=0;
 t0=Math.floor(performance.now());
 
 bRec=false;
 
 
 LCD_show();
 
 data_E=data_raw.length;			//console.log('len', data_E);
 
 if(bPow && bPlay)
 {							//console.log(bPow, bPlay);
	play_t_last=0;
	play_pos_t=0;
	
	timer_ID_play=setInterval( play , 15);
 }
 else
  clearInterval( timer_ID_play );


}
function next_slot() {
 bPow_sw(true);
 play_sw(false);
 
 slot_now++;
 if(slot_now>9) slot_now=0;
 
 if(slot_now==9) setMode(UI.settings);
 else
 if(slot_now==0)
	setMode(UI.manual);
	
 data_raw=arr_slots[slot_now][0];
 data=arr_slots[slot_now][1];
 LCD_show();
}

var play_t_last=0;
var play_pos_t=0;
var play_spd=1.0;
var play_v=0;

function play()
{						//console.log(bPow, bPlayStarted);
 if(!bPow)
 {
  clearInterval( timer_ID_play );
  bPlay=false;
  return;
 }

 if(data_raw.length==0) 
 {
	$tx('lcd', 'slot '+slot_now+ ' no data');
	return;
 }
 
 if(t_i>=data_E) 
 {
 t_i=0;
 t0=performance.now();
 play_pos_t=0;
 play_t_last=0;
 }
 
 
 play_spd=$('pot_spd').value/1024*4;
 if(play_spd>0.95 && play_spd<1.05) play_spd=1;
 
 dt=(play_t_last==0)?0:performance.now()-play_t_last;
 play_t_last=performance.now();
 play_pos_t+=dt*play_spd; //current time
 t=parseInt(data_raw[t_i][0]) //desired play time from file
										//console.log(performance.now(), t0, t);
								//console.log(play_pos_t, t);
 if(play_pos_t < t) return; //wait
 
 

 
	 //$tx('lcd', t_i+ ' '+data_raw[t_i][0]+' '+data_raw[t_i][1]) ;
	 
	 play_v=parseInt(data_raw[t_i][1]);
	 LCD_show();
	 t_i++;
}




/*
new Dygraph(div, "ny-vs-sf.txt", {
  legend: 'always',
  title: 'NYC vs. SF',
  showRoller: true,
  rollPeriod: 14,
  customBars: true,
  ylabel: 'Temperature (F)',
});
*/

	  /*
      var t = new Date();
      for (var i = 10; i >= 0; i--) {
        var x = new Date(t.getTime() - i * 1000);
        data.push([x, Math.random()]);
      }
	  */

      var g = new Dygraph(document.getElementById("graphdiv"), data,
                          {
                            drawPoints: true,
                            showRoller: true,
                            valueRange: [-300.0, 1024.0],
                            labels: ['Time', 'pot', 'spd*200', 'acc*3k', 'pos']
                          });


var pot = document.getElementById("pot");
var US_input = document.getElementById("US_input");

var il=0;

bInputEnable=false
pot.oninput = function() {
 bPow_sw(true);
 //if(!bInputEnable) return;
 
 v=parseInt(this.value);
 US_input_v=parseInt(US_input.value);

 /*
  if(il==1000) 
  {
   il=0;
   document.getElementById("log").innerText='';
  }
  il++;
    */
  if(bRec)
  {
  t=Math.floor(performance.now())-t0;
  $("log").innerText=t+"\t"+ v+'\r\n'+document.getElementById("log").innerText;
  
  data_raw.push([t, v]);
  
        //var x = new Date();  // current time
        //var y = Math.random();
	spd=0;
	acc=0;
	pos=0;
	if(data.length>1)
	{
	 dt1=(t-data[data.length-2][0])
	 spd=(v-data[data.length-2][1])/dt1;
		if(data.length>2)
		{
		 dt2=(data[data.length-1][0]-data[data.length-2][0])
		 acc=(spd-data[data.length-2][2]/200) /dt2
		}
	}
	data.push([new Date(t), v, spd*200, acc*3000, pos]);
	g.updateOptions( { 'file': data } );
  }
  
  //motor_v=motor_pos_(v, US_input_v)
  if(!bPlay)
  LCD_show()
}


US_input.oninput = function() {
//if(!bInputEnable) return;

//v=parseInt(this.value);
//US_input_v=parseInt(US_input.value);

// motor_pos_(v, US_input_v)
LCD_show()
}

function motor_pos_(v, amplitude_v, shift_v)
{
  v=(v/1024*limit_range );
  
  if(bPlay)
  {
	amplitude=amplitude_v/1024*2;
	shift=( shift_v/1024-0.5)*2*limit_range;
	v_out= limit_L+ v*amplitude +shift;
  }
  else
	v_out=limit_L+v;
  if(v_out<limit_L) v_out=limit_L;
  else 
  if(v_out>limit_R) v_out=limit_R;
  $('US_motor_sensor').value=v_out;		//if(bPlay) console.log(v,"=", amplitude, shift, v_out) //console.log(v, US_input_v, v_out)



  
  d=(v_out-v_smooth);
  
  dir_spd=v_smooth_spd>0;
  
  d_br=v_smooth_spd*v_smooth_spd/(Math.abs(v_smooth_acc)*2)*dir_spd;
  


  v_smooth_acc=d_br>d?-1:1;
  if(Math.abs(d_br-d)<Math.abs(d/50)) v_smooth_acc/=2;
  
  v_smooth_spd+=v_smooth_acc;	   console.log(d, d_br,'=', v_smooth_acc,v_smooth_spd,v_smooth)
  v_smooth+=v_smooth_spd;
  if(v_smooth<limit_L) v_smooth=limit_L;
  else 
  if(v_smooth>limit_R) v_smooth=limit_R;
  $('US_motor_smooth').value=v_smooth
  
  $('d_id').innerText=d
  $('d_br_id').innerText=d_br
  $('v_smooth_acc_id').innerText=v_smooth_acc
  $('v_smooth_spd_id').innerText=v_smooth_spd
  
  
  
  return v_out;
}
var v_smooth_acc=1;
var v_smooth_spd=0;
var v_smooth=110;


function motor_pos()
{
 
 pot_v= parseInt($('pot').value)
 US_input_v=parseInt($('US_input').value)
 
 v=bPlay?play_v:pot_v;
 amplitude_v=US_input_v;
 shift_v=bPlay?pot_v:0;
 
 motor_pos_v=Math.floor( motor_pos_(v, amplitude_v, shift_v))
 
 //console.log(pot_v,US_input_v, " = ",v, amplitude_v, shift_v, "=", motor_pos_v);
 
 return pot_v+" "+US_input_v+" "+motor_pos_v+" "+play_spd.toFixed(2);
}


</script>
<div style="display:none">
<p id='d_id'></p>
<p id='d_br_id'></p>
<p id='v_smooth_acc_id'></p>
<p id='v_smooth_spd_id'></p>
</div>
</body>
</html>